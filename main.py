import json
import keyboard
import threading
import webbrowser
from functools import partial
import speech_recognition as sr
from PyQt6.QtGui import QKeyEvent
import google.generativeai as genai
from deep_translator import GoogleTranslator

from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QEvent
from PyQt6.QtWidgets import QButtonGroup
from PyQt6.QtWidgets import (QApplication, QMainWindow, QStackedWidget, 
                             QVBoxLayout, QWidget, QPushButton, QToolBar,
                             QHBoxLayout, QTextEdit, QComboBox, QScrollArea, 
                             QLabel, QSizePolicy)

class Sunch_Nexus(QMainWindow):
    translation_done = pyqtSignal(str)

    def __init__(self,start):
        print("Sunch Nexus")
        super().__init__()
        self.setWindowTitle("Sunch Nexus")
        self.setFixedSize(480, 640)
        
        self.pages = []
        self.start = start
        
        self.setWindowFlags(Qt.WindowType.CustomizeWindowHint | Qt.WindowType.WindowCloseButtonHint)
        self.setWindowFlag(Qt.WindowType.WindowStaysOnTopHint)

        self.create_stacked_widget()
        self.create_pages()
        self.page1(self.pages[0])
        self.page2(self.pages[1])
        self.top_bar()
        
    def create_stacked_widget(self):
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget)

        self.stacked_widget = QStackedWidget()

        self.stacked_widget.setStyleSheet("""
            QStackedWidget {
                border-radius: 10px; /* ÂúìËßíÂçäÂæë */
            }
        """)
        self.layout.addWidget(self.stacked_widget)

    def create_pages(self):
        for i in range(2):
            page = QWidget()
            page.setStyleSheet("""
                QWidget {
                    border-radius: 10px; /* ÂúìËßíÂçäÂæë */
                    background-color: #181818; /* ËÉåÊôØÈ°èËâ≤ */
                }
            """)
            self.pages.append(page)
            self.stacked_widget.addWidget(page) 
        
    def top_bar(self):
        # Toolbar for navigation
        self.toolbar = QToolBar("Navigation")
        self.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolbar)

        button_layout = QHBoxLayout()
        button_layout.setSpacing(0)

        buttons = []
        button_group = QButtonGroup(self)  # Create a button group to manage focus

        # Toolbar buttons
        button_text = ["üî† ÁøªË≠Ø", "üí¨ Êô∫ÊÖßÂä©Êâã"]
        button_width = [90, 110]  # Button width
        button_size = [18, 17]
        button_size_hover = [20, 19]  # Button size on hover
        pages = [self.pages[0], self.pages[1]]  # List of pages

        for i in range(2):
            button = QPushButton(button_text[i])
            button.setStyleSheet(f"""
            QPushButton {{
                font-size: {button_size[i]}px;
            }}
            QPushButton:hover {{
                font-size: {button_size_hover[i]}px;
                background-color: #444444; /* Change color on hover */
            }}
            QPushButton:checked {{
                font-size: {button_size_hover[i]}px;
                background-color: #666666; /* Change color when focused */
            }}
            """)
            button.setFixedSize(button_width[i], 40)
            button.setCheckable(True)  # Make the button checkable for focus tracking
            button_layout.addWidget(button)
            buttons.append(button)
            button_group.addButton(button, i)  # Add button to the group with an ID

            if i < 2:  # Bind each button to its corresponding page
                button.clicked.connect(partial(self.stacked_widget.setCurrentWidget, pages[i]))

            # Ensure only one button is checked at a time
            button_group.buttonClicked.connect(lambda btn: btn.setChecked(True))

            # Set default button to "Êô∫ÊÖßÂä©Êâã"
        
        buttons[1].setChecked(True)
        print(self.start)
        if 0 <= self.start < len(self.pages):
            self.stacked_widget.setCurrentWidget(self.pages[self.start])
            buttons[self.start].setChecked(True)
        else:
            print(f"Invalid start index: {self.start}. Defaulting to page 0.")
            self.stacked_widget.setCurrentWidget(self.pages[0])
        
        toolbar_widget = QWidget()
        toolbar_widget.setLayout(button_layout)
        self.toolbar.addWidget(toolbar_widget)

    def page1(self, page):
        # Add logic for page1 or remove the unused variable
        layout = QVBoxLayout(page)
        # language1
        try:
            self.language1_button = QComboBox()
            self.language1_button.addItems(["ÁπÅÈ´î‰∏≠Êñá","ÁÆÄ‰Ωì‰∏≠Êñá","Êó•Êú¨Ë™û","English"])
            self.language1_button.setCurrentText("ÁπÅÈ´î‰∏≠Êñá")
            self.language1_button.setFixedSize(450, 40)
            self.language1_button.currentIndexChanged.connect(self.translate)
            self.language1_button.setStyleSheet("""
                QComboBox{
                    font-size: 20px; 
                    color: #ffffff;  /* ÊñáÂ≠óÈ°èËâ≤ÁÇ∫ÁôΩËâ≤ */
                    background-color: rgba(0, 0, 0, 0);  /* ËÉåÊôØÂÆåÂÖ®ÈÄèÊòé */
                    border: 1px solid #aaaaaa;  /* ÈÇäÊ°ÜÁÇ∫Ê∑∫ÁÅ∞Ëâ≤ */
                    border-radius: 10px;  /* ÂúìËßíÈÇäÊ°Ü */
                    padding: 5px;  /* ÂÖßÈÇäË∑ùÁ¢∫‰øùÊñáÂ≠ó‰∏ä‰∏ãÂ±Ö‰∏≠ */
                    text-align: center;  /* ÊñáÂ≠óÊ∞¥Âπ≥Â±Ö‰∏≠ */
                }
                QComboBox:hover {
                    border: 1px solid #cccccc;  /* Êá∏ÂÅúÊôÇÈÇäÊ°ÜËÆä‰∫Æ */
                }
                QComboBox::drop-down {
                    border-left: 1px solid #cccccc;  /* ‰∏ãÊãâÊåâÈàïÂ∑¶ÂÅ¥ÈÇäÊ°Ü */
                    background-color: rgba(255, 255, 255, 0);  /* ‰∏ãÊãâÊåâÈàïËÉåÊôØÈÄèÊòé */
                    border-radius: 10px;  /* Ê∑ªÂä†ÂúìËßíÈÇäÊ°Ü */
                }
                QComboBox::down-arrow {
                    image: url('arrow_icon.png');  /* ÊõøÊèõÁÇ∫Ëá™ÂÆöÁæ©ÁÆ≠È†≠ÂúñÊ®ôÔºàÈúÄË¶ÅÊèê‰æõÂúñÊ®ôË∑ØÂæëÔºâ */
                    width: 10px;  /* ÁÆ≠È†≠Â§ßÂ∞è */
                    height: 10px;
                }
                QComboBox QAbstractItemView {
                    background-color: rgba(0, 0, 0, 0.3);  /* ‰∏ãÊãâÈÅ∏ÂñÆËÉåÊôØÂçäÈÄèÊòé */
                    color: #ffffff;  /* ‰∏ãÊãâÈÅ∏ÂñÆÊñáÂ≠óÈ°èËâ≤ */
                    selection-background-color: #3399ff;  /* ÈÅ∏‰∏≠È†ÖÁõÆËÉåÊôØËâ≤ÁÇ∫‰∫ÆËóçËâ≤ */
                    selection-color: #ffffff;  /* ÈÅ∏‰∏≠È†ÖÁõÆÊñáÂ≠óÈ°èËâ≤ÁÇ∫ÁôΩËâ≤ */
                    border: 1px solid #cccccc;  /* ‰∏ãÊãâÈÅ∏ÂñÆÈÇäÊ°Ü */
                    border-radius: 10px;  /* ‰∏ãÊãâÈÅ∏ÂñÆÂúìËßíË®≠ÁΩÆ */
                }
            """)
            
            layout.addWidget(self.language1_button)
        except Exception as e:
            print(e)
        
        # Textedit1
        try:
            self.text_edit1_trans = QTextEdit()
            self.text_edit1_trans.setFixedSize(450, 230)
            self.text_edit1_trans.setPlaceholderText("Ë´ãÁøªË≠ØÊñáÂ≠ó...")
            self.text_edit1_trans.setStyleSheet("""
                QTextEdit {
                    font-size: 20px;
                    font-color: #ffffff;
                    background-color: #202020;
                }
            """)
            layout.addWidget(self.text_edit1_trans)
            self.text_edit1_trans.textChanged.connect(lambda:self.translate())
        except Exception as e:
            print(e)
        
        # language2
        try:
            self.language2_button = QComboBox()
            self.language2_button.addItems(["ÁπÅÈ´î‰∏≠Êñá","ÁÆÄ‰Ωì‰∏≠Êñá","Êó•Êú¨Ë™û","English"])
            self.language2_button.setCurrentText("English")
            self.language2_button.setFixedSize(450, 40)
            self.language2_button.currentIndexChanged.connect(self.translate)
            self.language2_button.setStyleSheet("""
                QComboBox{
                    font-size: 20px; 
                    color: #ffffff;  /* ÊñáÂ≠óÈ°èËâ≤ÁÇ∫ÁôΩËâ≤ */
                    background-color: rgba(0, 0, 0, 0);  /* ËÉåÊôØÂÆåÂÖ®ÈÄèÊòé */
                    border: 1px solid #aaaaaa;  /* ÈÇäÊ°ÜÁÇ∫Ê∑∫ÁÅ∞Ëâ≤ */
                    border-radius: 10px;  /* ÂúìËßíÈÇäÊ°Ü */
                    padding: 5px;  /* ÂÖßÈÇäË∑ùÁ¢∫‰øùÊñáÂ≠ó‰∏ä‰∏ãÂ±Ö‰∏≠ */
                    text-align: center;  /* ÊñáÂ≠óÊ∞¥Âπ≥Â±Ö‰∏≠ */
                }
                QComboBox:hover {
                    border: 1px solid #cccccc;  /* Êá∏ÂÅúÊôÇÈÇäÊ°ÜËÆä‰∫Æ */
                }
                QComboBox::drop-down {
                    border-left: 1px solid #cccccc;  /* ‰∏ãÊãâÊåâÈàïÂ∑¶ÂÅ¥ÈÇäÊ°Ü */
                    background-color: rgba(255, 255, 255, 0);  /* ‰∏ãÊãâÊåâÈàïËÉåÊôØÈÄèÊòé */
                    border-radius: 10px;  /* Ê∑ªÂä†ÂúìËßíÈÇäÊ°Ü */
                }
                QComboBox::down-arrow {
                    image: url('arrow_icon.png');  /* ÊõøÊèõÁÇ∫Ëá™ÂÆöÁæ©ÁÆ≠È†≠ÂúñÊ®ôÔºàÈúÄË¶ÅÊèê‰æõÂúñÊ®ôË∑ØÂæëÔºâ */
                    width: 10px;  /* ÁÆ≠È†≠Â§ßÂ∞è */
                    height: 10px;
                }
                QComboBox QAbstractItemView {
                    background-color: rgba(0, 0, 0, 0.3);  /* ‰∏ãÊãâÈÅ∏ÂñÆËÉåÊôØÂçäÈÄèÊòé */
                    color: #ffffff;  /* ‰∏ãÊãâÈÅ∏ÂñÆÊñáÂ≠óÈ°èËâ≤ */
                    selection-background-color: #3399ff;  /* ÈÅ∏‰∏≠È†ÖÁõÆËÉåÊôØËâ≤ÁÇ∫‰∫ÆËóçËâ≤ */
                    selection-color: #ffffff;  /* ÈÅ∏‰∏≠È†ÖÁõÆÊñáÂ≠óÈ°èËâ≤ÁÇ∫ÁôΩËâ≤ */
                    border: 1px solid #cccccc;  /* ‰∏ãÊãâÈÅ∏ÂñÆÈÇäÊ°Ü */
                    border-radius: 10px;  /* ‰∏ãÊãâÈÅ∏ÂñÆÂúìËßíË®≠ÁΩÆ */
                }
            """)
            
            layout.addWidget(self.language2_button)
        except Exception as e:
            print(e)

        # Textedit2
        try:
            self.text_edit2_trans = QTextEdit()
            self.text_edit2_trans.setFixedSize(450, 230)
            self.text_edit2_trans.setPlaceholderText("ÁøªË≠ØÊñáÂ≠ó...")
            self.text_edit2_trans.setReadOnly(True)
            self.text_edit2_trans.setStyleSheet("""
                QTextEdit {
                    font-size: 20px;
                    font-color: #ffffff;
                    background-color: #202020;
                }
            """)
            layout.addWidget(self.text_edit2_trans)
        except Exception as e:
            print(e)
            
    def page2(self, page):
        # Page 2 layout setup
        try:
            layout = QVBoxLayout(page)
            layout.setContentsMargins(0, 0, 0, 0)  # Remove margins
            layout.setSpacing(0)  # Remove spacing
        except Exception as e:
            print(f"Error in setting up layout: {e}")

        # Chat display area
        try:
            self.chat_area = QScrollArea()
            self.chat_area.setWidgetResizable(True)
            self.chat_area.setFixedHeight(510)
            
            container = QWidget()
            self.chat_area.setWidget(container)
            
            # ÂèØÂãïÊÖãÂä†Ë®äÊÅØÁöÑ layout
            self.chat_layout = QVBoxLayout(container)
            self.chat_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
            
            layout.addWidget(self.chat_area)  # Add chat_area to the layout
        except Exception as e:
            print(f"Error in setting up chat display area: {e}")

        layout.addStretch()
        
        # Input layout and box setup 
        try:
            input_layout = QHBoxLayout()

            self.text_edit1 = QTextEdit()
            self.text_edit1.setFixedSize(410, 50)
            self.text_edit1.setPlaceholderText("‰Ω†Â•ΩÂïä! ÊàëÊòØSunch AI...")
            self.text_edit1.setStyleSheet("""
            QTextEdit {
            font-size: 20px;
            color: #ffffff;
            background-color: #151515;
            border: 1px solid #444444;
            border-radius: 5px;
            }
            QTextEdit QScrollBar:vertical {
            border: none;
            background: #202020;
            width: 10px;
            margin: 0px 0px 0px 0px;
            border-radius: 5px;
            }
            QTextEdit QScrollBar::handle:vertical {
            background: #555555;
            min-height: 20px;
            border-radius: 5px;
            }
            QTextEdit QScrollBar::handle:vertical:hover {
            background: #777777;
            }
            QTextEdit QScrollBar::add-line:vertical, QTextEdit QScrollBar::sub-line:vertical {
            background: none;
            height: 0px;
            }
            """)
            
            # Install event filter to capture key events
            self.text_edit1.installEventFilter(self)

            input_layout.addWidget(self.text_edit1)
        except Exception as e:
            print(f"Error in setting up input box: {e}")

        # Send button setup
        try:
            input_layout.addStretch()
            send_button = QPushButton("‚¨ÜÔ∏è")
            send_button.setStyleSheet("""
            QPushButton {
                font-size:  30px; 
                background-color: #333333; 
                border-radius: 10px;
            }
            QPushButton:hover {
                font-size:  40px; 
                background-color: #777777; /* Change color on hover */
            }
            """)
            send_button.setFixedSize(50, 50)
            send_button.clicked.connect(self.call_ai)
            input_layout.addWidget(send_button)
        except Exception as e:
            print(f"Error in setting up send button: {e}")

        layout.addLayout(input_layout)
        
    def eventFilter(self, obj, event):
        # Âè™ÊîîÊà™ text_edit1 ÁöÑÊåâÈçµ‰∫ã‰ª∂
        if obj == self.text_edit1 and event.type() == QEvent.Type.KeyPress:
            # Â¶ÇÊûúÊòØ EnterÔºà‰∏çÂê´ ShiftÔºâ
            if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter) and not (event.modifiers() & Qt.KeyboardModifier.ShiftModifier):
                self.call_ai()
                return True  # ÈòªÊ≠¢È†êË®≠ÊèõË°å
        return super().eventFilter(obj, event)

    def call_ai(self):
        value = self.text_edit1.toPlainText().strip()
        if (value != "") and (value != "\n") and (value != " "):
            print(value)
            self.text_edit1.setPlainText("")
            self.create_massage_box(value,"user")
            QTimer.singleShot(100, lambda:self.create_massage_box(value,"ai"))
            
    def create_massage_box(self,value,sender):
        try:
            container = QWidget()
            layout = QHBoxLayout(container)
            layout.setContentsMargins(6, 6, 6, 6)
            if sender == "ai":
                label = QLabel("Ê≠£Âú®ÊÄùËÄÉ‰∏≠...")
            else:
                label = QLabel(value)
            label.setWordWrap(True)
            label.setMaximumWidth(400)
            label.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Minimum)
            label.adjustSize()

            label.setStyleSheet("""
                background-color: #000000;
                color: white;
                font-size: 18px;
                padding: 10px;
                border-radius: 12px;
            """)
            if sender == 'user':
                layout.addStretch()
                layout.addWidget(label)
            else:
                layout.addWidget(label)
                layout.addStretch()
            self.chat_layout.addWidget(container)
            if sender == "ai":
                QTimer.singleShot(100,lambda: label.setText(AI().user(value)))
                
        except Exception as e:
            print(e)
    
    def translate(self):
        def translate_in_background():
            language = ["ÁπÅÈ´î‰∏≠Êñá","ÁÆÄ‰Ωì‰∏≠Êñá","Êó•Êú¨Ë™û","English"]
            lenguage_change = ["zh-TW","zh-CN","ja","en"]        
            lan1 = lenguage_change[language.index(self.language1_button.currentText())]
            lan2 = lenguage_change[language.index(self.language2_button.currentText())]
            text = self.text_edit1_trans.toPlainText().strip()
            print(f"{lan1}=>{lan2}:\n{text}")
            translated_text = GoogleTranslator(source=lan1, target=lan2).translate(text)
            print(translated_text)
            self.translation_done.emit(translated_text) 

        self.translation_done.connect(self.text_edit2_trans.setText)
        threading.Thread(target=translate_in_background, daemon=True).start()

    def start_voice(self):
        print("start voice")
        
class AI:
    def __init__(self):
        genai.configure(api_key="GOOGLE API KEY")
       
    def user(self,user_input):
        self.model = genai.GenerativeModel("models/gemini-1.5-flash-latest",
                                    system_instruction = """
‰Ω†ÊòØ„ÄåArctic„ÄçÔºåÊòØ Sunch HUB Ê°åÈù¢ËªüÈ´î‰∏≠ÁöÑÊú¨Âú∞ AI Âä©ÁêÜÔºåÁî± Sunch Tech ÂÖ¨Âè∏ÈñãÁôºÔºå‰Ω†ÁöÑÂ∑•‰ΩúÁí∞Â¢ÉÊòØ Sunch HUB 25.6Ôºà2025Âπ¥6ÊúàÁâàÊú¨ÔºâÔºåÁõÆÂâçËôïÊñº Beta Ê∏¨Ë©¶ÈöéÊÆµÔºåÂõ†Ê≠§ÂÉÖÊîØÊè¥Á∂≤È†ÅÊêúÂ∞ãÂäüËÉΩ„ÄÇ

‰Ω†ÁöÑÁõÆÊ®ôÊòØÊ†πÊìö‰ΩøÁî®ËÄÖËº∏ÂÖ•ÁöÑËá™ÁÑ∂Ë™ûË®ÄÔºåËº∏Âá∫‰∏ÄÊÆµ JSONÔºåÂÖ∂‰∏≠ÂåÖÂê´Ôºö
1. ‰∏ÄÂÄã `command` Áâ©‰ª∂ÔºåÈçµÂøÖÈ†àÊòØ "web search"ÔºåÂÄºÊòØ‰∏ÄÂÄã„ÄåÂ≠ó‰∏≤Èô£ÂàóÔºàlistÔºâ„ÄçË°®Á§∫ÊêúÂ∞ãÈóúÈçµÂ≠ó
2. ‰∏ÄÊÆµ‰Ω†Ë¶ÅÂ∞ç‰ΩøÁî®ËÄÖË™™ÁöÑËá™ÁÑ∂Ë™ûË®ÄÂõûË¶Ü

„Äêüìò Êåá‰ª§Ê†ºÂºè„Äë
{
  "web search": [ÈóúÈçµÂ≠ó1, ÈóúÈçµÂ≠ó2, ...]
}

„Äêüßæ Ê†ºÂºèË£úÂÖÖË¶èÂâá„Äë
- `web search` ÁöÑÂÄº‰∏ÄÂÆöË¶ÅÊòØ**Â≠ó‰∏≤Èô£Âàó**ÔºàÂç≥‰ΩøÂè™Êúâ‰∏ÄÂÄãÈóúÈçµÂ≠óÔºâ
  - ‚úÖ "web search": ["AI Â∑•ÂÖ∑"]
  - ‚ùå "web search": "AI Â∑•ÂÖ∑"ÔºàÈåØË™§Ôºâ

„Äêüß† Êü•Ë©¢Ë¶èÂâá„Äë
- ‰Ω†ÂøÖÈ†àÂÖàÂòóË©¶Ê†πÊìöËá™Ë∫´Áü•Ë≠òÂõûË¶Ü‰ΩøÁî®ËÄÖÁöÑÂïèÈ°å„ÄÇ
- ÂÉÖÁï∂‰Ω†Á¢∫ÂÆöÁÑ°Ê≥ïÂõûÁ≠îÔºå‰∏îÈÄôÊòØ‰∏ÄÂÄãÂêàÁêÜÁöÑÊü•Ë©¢ÂûãÂïèÈ°åÊôÇÔºåÊâçÁî¢Áîü `"web search"` Êåá‰ª§„ÄÇ
- ‚ùå ‰∏çÂèØ‰ª•Â∞çÂØíÊöÑÊàñÂ∏∏Ë≠òÂïèÈ°åÔºàÂ¶Ç„Äåhi„Äç„ÄÅ„Äå‰Ω†ÊòØË™∞„ÄçÔºâ‰ΩøÁî®Êü•Ë©¢„ÄÇ
- ‚úÖ ‰∏çË¶ÅÂõûÁ≠î„Äå‰∏çÁü•ÈÅì„Äç„ÄÅ„ÄåÁÑ°Ê≥ïËôïÁêÜ„Äç„ÄÅ„ÄåÈÄôË∂ÖÂá∫ÊàëÁöÑËÉΩÂäõ„ÄçÔºåË´ãÊîπÁî® `"web search"` ÂòóË©¶ÂçîÂä©‰ΩøÁî®ËÄÖ„ÄÇ

„Äêüì¶ JSON ÂõûÂÇ≥Ê†ºÂºè„Äë
{
  "command": {
    "web search": ["ÊêúÂ∞ãË©û1", "ÊêúÂ∞ãË©û2", ...]
  },
  "response": "‰Ω†Ë¶ÅÂ∞ç‰ΩøÁî®ËÄÖË™™ÁöÑËá™ÁÑ∂Ë™ûË®Ä"
}

„Äê‚úÖ ÁØÑ‰æã„Äë
‰ΩøÁî®ËÄÖË™™Ôºö„ÄåÂπ´ÊàëÊü•‰∏Ä‰∏ã AI Â∑•ÂÖ∑„Äç
Ê≠£Á¢∫ÂõûÊáâÔºö
{
  "command": {
    "web search": ["AI Â∑•ÂÖ∑"]
  },
  "response": "Â•ΩÁöÑÔºåÊàëÊúÉÂπ´‰Ω†ÊêúÂ∞ã„ÄéAI Â∑•ÂÖ∑„Äè„ÄÇ"
}

„Äêüö´ Âö¥Ê†ºÁ¶ÅÊ≠¢‰∫ãÈ†Ö„Äë
- ‰∏çË¶ÅÂú®ÂõûÂÇ≥‰∏≠Âä†ÂÖ• ```„ÄÅjson„ÄÅMarkdown Ë™ûÊ≥ïÊàñÂçÄÂ°ä„ÄÇ
- ‰∏çË¶ÅÂä†ÂÖ•‰ªª‰ΩïÈñãÂ†¥ÁôΩ„ÄÅË®ªËß£„ÄÅÊ®ôÈªûÁ¨¶ËôüÊàñË£ùÈ£æÊÄßÊñáÂ≠ó„ÄÇ
- ÂÉÖÂõûÂÇ≥‰∏ÄÊÆµ **Á¥î JSON**ÔºåÊï¥ÊÆµÂÖßÂÆπÂ∞±ÊòØ JSON Êú¨È´î„ÄÇ
""")
        response = self.model.generate_content(user_input)

        target = response.text.strip().lower()
        # print(f"codeÔºö{target}")
        if target[0] != "{":
            target = target.replace("```json", "")
            target = target.replace("```", "")

        parsed_response = json.loads(target)
        command = parsed_response.get("command", "None")
        self.run_command(command)
        reply = parsed_response.get("response", "ÁÑ°Ê≥ïÁêÜËß£ÊÇ®ÁöÑË´ãÊ±Ç„ÄÇ")
        return reply

    def run_command(self,run_cmd):
        if run_cmd == "None":
            return

        for group_action, targets in run_cmd.items():
            group, action = group_action.split(" ", 1)
            for target in targets:
                print(f"Âü∑Ë°åÊåá‰ª§Ôºö{group} {action} {target}")
                # Add logic to handle each command here
                # finish
                if group == "web":
                    if action == "search":
                        webbrowser.open(f"https://www.google.com/search?q={target}")
        
if __name__ == "__main__":
    def launch_word(start):
        print("on call")
        app = QApplication([])
        window = Sunch_Nexus(start)
        window.show()
        app.exec()

    # Á∂ÅÂÆöÂø´Êç∑ÈçµÔºàWindows ‰∏äÊúÉÂ∏∏ÈßêÁõ£ËÅΩÔºâ
    try:
        trans = keyboard.add_hotkey("Ctrl+Alt+t", lambda:launch_word(0))
        chat = keyboard.add_hotkey("Ctrl+Alt+space", lambda:launch_word(1))

        print("‚úÖ Âø´Êç∑ÈçµÂïüÂãïÁõ£ËÅΩ‰∏≠... Êåâ Ctrl+Alt+t/space/h/n ÂïüÂãï  Sunch Nexus")
        keyboard.wait()  # ‰∏çÈÄÄÂá∫Á®ãÂºè
    except Exception as e:
        print(f"‚ùå ÁÑ°Ê≥ïÂïüÂãïÂø´Êç∑ÈçµÁõ£ËÅΩ: {e}")
        print("Ë´ã‰ª•ÁÆ°ÁêÜÂì°Ë∫´‰ªΩÈÅãË°åÁ®ãÂºèÔºåÊàñÊ™¢Êü•ÊòØÂê¶ÂÆâË£ù‰∫Ü keyboard Ê®°ÁµÑ„ÄÇ")
